{"version":3,"sources":["Componets/ButtonClick.js","index.js"],"names":["ButtonClick","props","children","to","target","rest","renderLink","React","useMemo","forwardRef","itemProps","ref","icons","IconButton","button","component","Button","MyForm","useSnackbar","enqueueSnackbar","closeSnackbar","useCallback","variant","preventDuplicate","action","key","color","onClick","handleClickWithAction","startIcon","defaultProps","ReactDOM","render","StrictMode","dense","maxSnack","anchorOrigin","vertical","horizontal","TransitionComponent","Collapse","document","getElementById"],"mappings":"6VAKe,SAASA,EAAYC,GAClC,IAAQC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,GAAIC,EAAoBH,EAApBG,OAAWC,EAAjC,YAA0CJ,EAA1C,GAEMK,EAAaC,IAAMC,SACvB,kBACED,IAAME,YAAW,SAACC,EAAWC,GAAZ,OACf,cAAC,IAAD,aAAYR,GAAIA,EAAIC,OAAQA,EAAQO,IAAKA,GAASD,SAEtD,CAACP,EAAIC,IAEP,OAAIH,EAAMW,MAEN,cAACC,EAAA,EAAD,2BAAgBR,GAAhB,IAAsBS,QAAM,EAACC,UAAWT,EAAxC,SACGJ,KAKH,cAACc,EAAA,EAAD,2BAAYX,GAAZ,IAAkBS,QAAM,EAACC,UAAWT,EAApC,SACGJ,KCXM,SAASe,EAAOhB,GAC7B,MAA2CiB,cAAnCC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,cAwBzB,OAtB8BC,uBAAY,WACxCF,EAAgB,6BAA8B,CAC5CG,QAAS,UACTC,kBAAkB,EAClBC,OAAQ,SAACC,GAAD,OACN,eAAC,WAAD,WACE,cAACzB,EAAD,CACE0B,MAAM,UACNd,OAAO,EACPT,GAAG,uBACHC,OAAO,SAJT,SAME,cAAC,IAAD,MAEF,cAACS,EAAA,EAAD,CAAYa,MAAM,UAAUC,QAAS,kBAAMP,EAAcK,IAAzD,SACE,cAAC,IAAD,cAKP,CAACN,EAAiBC,GACrBQ,GAEE,eAAC,WAAD,WACE,cAAC5B,EAAD,CACE0B,MAAM,UACNd,OAAO,EACPT,GAAG,uBACHC,OAAO,SAJT,SAME,cAAC,IAAD,MAGF,cAACJ,EAAD,CACE0B,MAAM,UACNvB,GAAG,gBACHC,OAAO,SACPyB,UAAW,cAAC,IAAD,IACXP,QAAQ,YALV,4BDnBNtB,EAAY8B,aAAe,CAAElB,OAAO,EAAOR,OAAQ,SCgCnD2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEV,kBAAgB,EAChBW,OAAO,EACPC,SAAU,EACVC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,oBAAqBC,IARvB,SAUE,cAACvB,EAAD,UAINwB,SAASC,eAAe,W","file":"static/js/main.1fee484f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, IconButton } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nexport default function ButtonClick(props) {\n  const { children, to, target, ...rest } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        <RouterLink to={to} target={target} ref={ref} {...itemProps} />\n      )),\n    [to, target]\n  );\n  if (props.icons) {\n    return (\n      <IconButton {...rest} button component={renderLink}>\n        {children}\n      </IconButton>\n    );\n  } else {\n    return (\n      <Button {...rest} button component={renderLink}>\n        {children}\n      </Button>\n    );\n  }\n}\n\nButtonClick.defaultProps = { icons: false, target: \"_self\" };\nButtonClick.propTypes = {\n  to: PropTypes.string.isRequired,\n};\n///<FolderSharedIcon />\n","import React, { useCallback, Fragment } from \"react\";\n//import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport WebIcon from \"@mui/icons-material/Web\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n//import NotificationsIcon from \"@mui/icons-material/Notifications\";\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Collapse, IconButton } from \"@mui/material\";\nimport ButtonClick from \"./Componets/ButtonClick\";\nimport { useSnackbar } from \"notistack\";\n\nexport default function MyForm(props) {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const handleClickWithAction = useCallback(() => {\n    enqueueSnackbar(\"Bienvenidos... afimpel.com\", {\n      variant: \"success\",\n      preventDuplicate: true,\n      action: (key) => (\n        <Fragment>\n          <ButtonClick\n            color=\"inherit\"\n            icons={true}\n            to=\"//github.com/afimpel\"\n            target=\"_blank\"\n          >\n            <GitHubIcon />\n          </ButtonClick>\n          <IconButton color=\"inherit\" onClick={() => closeSnackbar(key)}>\n            <CloseIcon />\n          </IconButton>\n        </Fragment>\n      ),\n    });\n  }, [enqueueSnackbar, closeSnackbar]);\n  handleClickWithAction();\n  return (\n    <Fragment>\n      <ButtonClick\n        color=\"success\"\n        icons={true}\n        to=\"//github.com/afimpel\"\n        target=\"_blank\"\n      >\n        <GitHubIcon />\n      </ButtonClick>\n\n      <ButtonClick\n        color=\"success\"\n        to=\"//afimpel.com\"\n        target=\"_blank\"\n        startIcon={<WebIcon />}\n        variant=\"contained\"\n      >\n        afimpel.com\n      </ButtonClick>\n    </Fragment>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <SnackbarProvider\n        preventDuplicate\n        dense={true}\n        maxSnack={9}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        TransitionComponent={Collapse}\n      >\n        <MyForm />\n      </SnackbarProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}